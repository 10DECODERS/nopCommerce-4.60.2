@model ShoppingCartModel


@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax;
@using Nop.Web.Components;
@using Nop.Web.Framework.Infrastructure;
@using Nop.Web.Framework.Mvc.Routing;
@using Nop.Web.Models.ShoppingCart;

@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject OrderSettings orderSettings

<style>

	/*iPad Air*/
	@@media screen and (min-device-width: 820px) and (max-device-width: 1180px) {

		.SpecificationStyle {
			display: none;
		}
	}

	/*	/*iPad Mini*/
	@@media screen and (min-device-width: 768px) and (max-device-width: 1024px) {

		.SpecificationStyle {
			display: none;
		}
	}

	*/
</style>

<div class="order-summary-content">
	@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore, additionalData = Model })
	@await Html.PartialAsync("~/Plugins/Pos/Views/_OrderReviewData.cshtml", Model.OrderReviewData)
	@if (Model.Items.Count > 0)
	{
		if (Model.Warnings.Count > 0)
		{
			<div class="message-error">
				<ul>
					@foreach (var warning in Model.Warnings)
					{
						<li>@warning</li>
					}
				</ul>
			</div>
		}
		@*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
		<form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
			<div class="table-wrapper">
				<table class="cart">
					<colgroup>
						@if (Model.ShowSku)
						{
							<col width="1" />
						}
						@if (Model.ShowProductImages)
						{
							<col width="1" />
						}
						<col />
						@if (Model.ShowVendorName)
						{
							<col width="1" />
						}
						<col width="1" />
						<col width="1" />
						<col width="1" />
						@if (Model.IsEditable)
						{
							<col width="1" />
						}
					</colgroup>
					<thead>
						<tr>
							@if (Model.ShowSku)
							{
								<th class="sku">
									SKU
								</th>
							}
							@if (Model.ShowProductImages)
							{
								<th class="product-picture">
									Image
								</th>
							}
							<th class="product">
								Product(s)
							</th>
							@if (Model.ShowVendorName)
							{
								<th class="vendor">
									Vendor name
								</th>
							}
							<th class="unit-price">
								Price
							</th>
							<th class="quantity">
								Qty.
							</th>
							<th class="subtotal">
								Total
							</th>
							@if (Model.IsEditable)
							{
								<th class="remove-from-cart">
									Remove
								</th>
							}
						</tr>
					</thead>
					<tbody>
						@foreach (var item in Model.Items)
						{
							<tr>
								@if (Model.ShowSku)
								{
									<td class="sku">
										<label class="td-title">SKU</label>
										<span class="sku-number">@item.Sku</span>
									</td>
								}
								@if (Model.ShowProductImages)
								{
									<td class="product-picture">
										<a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
									</td>
								}
								<td class="product">
									@{
										var pname = item.ProductName;
										var testpname = pname.Substring(0, 12);
									}
									<a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))">@testpname...</a>
									@*<a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))" class="product-name">@item.ProductName</a>*@

									@if (!string.IsNullOrEmpty(item.AttributeInfo))
									{
										<div class="SpecificationStyle">
											@Html.Raw(item.AttributeInfo)
										</div>
									}
									else
									{
										<div>
										</div>
									}
									@if (!string.IsNullOrEmpty(item.RecurringInfo))
									{
										<div class="recurring-info">
											@Html.Raw(item.RecurringInfo)
										</div>
									}
									@if (!string.IsNullOrEmpty(item.RentalInfo))
									{
										<div class="rental-info">
											@Html.Raw(item.RentalInfo)
										</div>
									}
									@if (Model.IsEditable && item.AllowItemEditing)
									{
										var editCartItemUrl = Url.RouteUrl<Product>(new { SeName = item.ProductSeName }, webHelper.GetCurrentRequestProtocol());
										editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
										<div class="edit-item">
											<a href="@editCartItemUrl">Edit</a>
										</div>
									}
									@if (item.Warnings.Count > 0)
									{
										<div class="message-error">
											<ul>
												@foreach (var warning in item.Warnings)
												{
													<li>@Html.Raw(warning)</li>
												}
											</ul>
										</div>
									}
								</td>
								@if (Model.ShowVendorName)
								{
									<td class="vendor">
										<label class="td-title">Vendor name</label>
										<span class="vendor-name">@item.VendorName</span>
									</td>
								}
								<td class="unit-price">
									<label class="td-title">Price</label>
									<span class="product-unit-price">@item.UnitPrice</span>
								</td>
								<td class="quantity">
									<label class="td-title" for="itemquantity@(item.Id)">Qty.</label>
									@if (Model.IsEditable)
									{
										if (item.AllowedQuantities.Count > 0)
										{
											<select name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" class="qty-dropdown">
												@foreach (var qty in item.AllowedQuantities)
												{
													<option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
												}
											</select>
										}
										else
										{
											<input name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" aria-label="Quantity" />
										}
									}
									else
									{
										<span class="product-quantity">@item.Quantity</span>
									}
								</td>
								<td class="subtotal">
									<label class="td-title">Total</label>
									<span class="product-subtotal">@item.SubTotal</span>
									@if (!string.IsNullOrEmpty(item.Discount))
									{
										<div class="discount">
											(You save: {0}, item.Discount)
										</div>
										if (item.MaximumDiscountedQty.HasValue)
										{
											<div class="discount-additional-info">
												(Discounted qty: {0}, item.MaximumDiscountedQty.Value)
											</div>
										}
									}
								</td>
								@if (Model.IsEditable)
								{
									<td class="remove-from-cart">
										@if (item.DisableRemoval)
										{
											<text>&nbsp;</text>
										}
										else
										{
											<input type="checkbox" name="removefromcart" id="removefromcart@(item.Id)" value="@(item.Id)" aria-label="Remove" />
											<button type="button" name="updatecart" class="remove-btn" onclick="$('#removefromcart@(item.Id)').attr('checked', true); $('#updatecart').click();"></button>
										}
									</td>
								}
							</tr>
						}
					</tbody>
				</table>
			</div>
			@if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
			{
				var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
				//tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
				//of course, you can modify appropriate locales to include VAT info there
				<div class="tax-shipping-info">
					@*@T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteTopicUrl("shippinginfo"))*@
				</div>
			}
			<div class="cart-options">
				@if (Model.IsEditable)
				{
					<div class="common-buttons">
						<button type="submit" name="updatecart" id="updatecart" class="button-2 update-cart-button">Update shopping cart</button>

						<button type="submit" name="continueshopping" class="button-2 continue-shopping-button">Continue shopping</button>
						@await Component.InvokeAsync(typeof(ShoppingCartEstimateShippingViewComponent))
					</div>
				}
				@if (Model.IsEditable)
				{
					@await Html.PartialAsync("_CheckoutAttributes", Model)
				}
			</div>
			<div class="cart-footer">
				@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter, additionalData = Model })
				@if (Model.IsEditable)
				{
					<div class="cart-collaterals">
						<div class="deals">
							@await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
							@await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
							@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals, additionalData = Model })
						</div>
					</div>
				}
				<div class="totals">
					@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryTotals, additionalData = Model })
					@await Component.InvokeAsync(typeof(OrderTotalsViewComponent), new { isEditable = Model.IsEditable })
					@if (Model.IsEditable)
					{
						if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
						{
							<div class="min-amount-warning">
								@Model.MinOrderSubtotalWarning
							</div>
						}
					}
					@if (Model.IsEditable)
					{
						if (Model.TermsOfServiceOnShoppingCartPage)
						{
							<div id="terms-of-service-warning-box" title="Terms of service" style="display: none;">
								<p>Please accept the terms of service before the next step</p>
							</div>
							<div class="terms-of-service">
								<input id="termsofservice" type="checkbox" name="termsofservice" />
								<label for="termsofservice">I agree with the terms of service and I adhere to them unconditionally</label>
								@if (Model.TermsOfServicePopup)
								{
									<a class="read" id="read-terms">(read)</a>
									<script asp-location="Footer">
										$(document).ready(function () {
											$('#read-terms').on('click',
												function (e) {
													e.preventDefault();
													displayPopupContentFromUrl(
														'@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
														'Terms of service');
												});
										});
									</script>
								}
								else
								{
									<a class="read" id="read-terms" href="@Url.RouteTopicUrl("conditionsofuse")">(read)</a>
								}
							</div>
						}
						<div class="checkout-buttons">
							@if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
							{
								<script asp-location="Footer">
									$(document).ready(function () {
										$('#checkout').on('click', function () {
											//terms of service
											var termOfServiceOk = true;
											if ($('#termsofservice').length > 0) {
												//terms of service element exists
												if (!$('#termsofservice').is(':checked')) {
													$("#terms-of-service-warning-box").dialog();
													termOfServiceOk = false;
												} else {
													termOfServiceOk = true;
												}
											}
											return termOfServiceOk;
										});
									});
								</script>
								if (orderSettings.CheckoutDisabled)
								{
									<div class="checkout-disabled">
										Sorry, checkout process is temporary disabled
									</div>
								}
								else
								{
									<button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
										Checkout
									</button>
								}
							}
						</div>
						<div class="addon-buttons">
							@*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
							@foreach (var pm in Model.ButtonPaymentMethodViewComponents)
							{
								@await Component.InvokeAsync(pm)
							}
						</div>
					}
				</div>
			</div>
			@if (Model.IsEditable)
			{
				@await Component.InvokeAsync(typeof(CrossSellProductsViewComponent))
			}
		</form>
	}
	else
	{
		<div class="no-data">
			"Your Shopping Cart is empty!
		</div>
	}
	@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter, additionalData = Model })
</div>