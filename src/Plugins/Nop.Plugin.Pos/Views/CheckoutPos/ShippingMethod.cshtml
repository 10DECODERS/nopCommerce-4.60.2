@using Nop.Web.Models.Checkout;
@using Nop.Web.Components;
@using Nop.Web.Framework.Infrastructure;
@using Nop.Web.Framework.UI;
@model CheckoutShippingMethodModel

@inject INopHtmlHelper _nopHtmlHelper

@using Nop.Core
@inject IWebHelper webHelper

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@*we remove the default InputTagHelper to prevent the checkbox duplicating: https://stackoverflow.com/questions/42544961/asp-net-core-custom-input-tag-helper-rendering-duplicate-checkboxes*@
@removeTagHelper Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, Nop.Web.Framework
@addTagHelper *, MiniProfiler.AspNetCore.Mvc
@{
    Layout = "_ColumnsOne";

     var storeLocation = webHelper.GetStoreLocation();

    //title
    _nopHtmlHelper.AddTitleParts("Checkout");
    //page class
    _nopHtmlHelper.AppendPageCssClassParts("html-checkout-page");
    _nopHtmlHelper.AppendPageCssClassParts("html-shipping-method-page");
}
<div class="page checkout-page shipping-method-page">
    @await Component.InvokeAsync(typeof(CheckoutProgressViewComponent), new { step = CheckoutProgressStep.Shipping })
    <div class="page-title">
        <h1>Select shipping method</h1>
    </div>
    <div class="page-body checkout-data">
        <div class="section shipping-method">
            <form id="billing-form" asp-controoler="CheckoutPos" asp-action="OpcSaveShippingMethod" method="post">
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CheckoutShippingMethodTop, additionalData = Model })

                @if (Model.DisplayPickupInStore && Model.PickupPointsModel.AllowPickupInStore)
                {
                    @await Html.PartialAsync("~/Plugins/Pos/Views/CheckoutPos/_PickupPoints.cshtml", Model.PickupPointsModel)
                    <script asp-location="Footer">
                        $(document).ready(function () {
                            $(document).on('checkout_toggle_pickup_in_store', function (e) {
                                if (e.checked)
                                    $('.method-list').hide();
                                else
                                    $('.method-list').show();
                            });
                        });
                    </script>
                }

                @if (Model.PickupPointsModel == null || !Model.PickupPointsModel.PickupInStoreOnly)
                {
                    @if (Model.Warnings.Count == 0)
                    {
                        <ul class="method-list">
                            @for (var i = 0; i < Model.ShippingMethods.Count; i++)
                            {
                                var shippingMethod = Model.ShippingMethods[i];
                                <li>
                                    <div class="method-name">
                                        <input id="shippingoption_@(i)" type="radio" name="shippingoption" value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" checked="@shippingMethod.Selected" />
                                        <label for="shippingoption_@(i)"> @string.Format("{0} ({1})", shippingMethod.Name, shippingMethod.Fee)</label>
                                    </div>
                                    @if (!string.IsNullOrEmpty(shippingMethod.Description))
                                    {
                                        <div class="method-description">
                                            @Html.Raw(shippingMethod.Description)
                                        </div>
                                    }
                                </li>
                            }
                        </ul>
                        if (Model.NotifyCustomerAboutShippingFromMultipleLocations)
                        {
                            <div class="multiple-locations">
                                Please note that your order will be shipped from multiple locations
                            </div>
                        }
                        <div class="buttons">
                            <button type="button" onclick="window.location.href='@(storeLocation)checkoutpos/shippingaddress'" class="button-1">Back</button>                           <button type="submit" name="nextstep" class="button-1 shipping-method-next-step-button">Next</button>
                        </div>
                    }
                    else
                    {
                        <div class="message-error">
                            <ul>
                                @foreach (var warning in Model.Warnings)
                                {
                                    <li>@warning</li>
                                }
                            </ul>
                        </div>
                    }
                }

                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CheckoutShippingMethodBottom, additionalData = Model })
            </form>
        </div>
        <div class="section order-summary">
            <div class="title">
                <strong>Order summary</strong>
            </div>
            @await Component.InvokeAsync(typeof(OrderSummaryViewComponent))
        </div>
    </div>
</div>
