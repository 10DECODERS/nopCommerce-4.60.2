@using Nop.Core
@using Nop.Services.Customers
@using Nop.Web.Components;
@using Nop.Web.Framework.Infrastructure;
@using Nop.Web.Framework.UI;
@using Nop.Web.Models.Checkout;
@model CheckoutBillingAddressModel
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject ICustomerService _customerService
@inject INopHtmlHelper _nophtmlhelper

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@*we remove the default InputTagHelper to prevent the checkbox duplicating: https://stackoverflow.com/questions/42544961/asp-net-core-custom-input-tag-helper-rendering-duplicate-checkboxes*@
@removeTagHelper Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, Nop.Web.Framework
@addTagHelper *, MiniProfiler.AspNetCore.Mvc
@{
    Layout = "_ColumnsOne";

    var storeLocation = webHelper.GetStoreLocation();
        
    //title
    _nophtmlhelper.AddTitleParts("Checkout");
    //page class
    _nophtmlhelper.AppendPageCssClassParts("html-checkout-page");
    _nophtmlhelper.AppendPageCssClassParts("html-billing-address-page");
}

<script src="~/js/public.billingaddress.js" asp-location="Footer"></script>

<div class="page checkout-page billing-address-page">
    @await Component.InvokeAsync(typeof(CheckoutProgressViewComponent), new { step = CheckoutProgressStep.Address })
    <div class="page-title">
        <h1>Billing address</h1>
    </div>
    <div class="page-body checkout-data">
        <form id="billing-form" asp-controoler="CheckoutPos" asp-action="OpcSaveBilling" method="post">
            <div class="billing-addresses"> 
                <div id="toggle-billing-address">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CheckoutBillingAddressTop, additionalData = Model })
                    @if (Model.ShipToSameAddressAllowed)
                    {
                        <div class="section ship-to-same-address">
                            <div class="selector">
                                <input asp-for="ShipToSameAddress" />
                                <label asp-for="ShipToSameAddress">Ship to the same address</label>
                            </div>
                        </div>
                    }
                    @if (Model.ExistingAddresses.Count > 0)
                    {
                        <div class="section select-billing-address" style="display:none !important">
                            <div class="title">
                                <strong>Select billing address</strong>
                            </div>
                            @if (Model.InvalidExistingAddresses.Count > 0)
                            {
                                <label class="min-amount-warning">
                                    @string.Format("You have {0} invalid address(es)", Model.InvalidExistingAddresses.Count)
                                </label>
                            }
                            <div class="address-grid">
                                @foreach (var item in Model.ExistingAddresses)
                                {
                                    <div class="address-item">
                                        <div class="address-list-page">
                                           @* <button id="edit-button-@(item.Id)" type="button" class="button-2 edit-address-button" onclick="CheckoutBilling.editAddress('@(storeLocation)checkoutPos/GetAddressById/', @(item.Id), 'Edit address'); return false;">Edit</button>
                                            <button id="delete-button-@(item.Id)" type="button" class="button-2 delete-address-button" onclick="CheckoutBilling.deleteEditAddress('@(storeLocation)checkoutPos/DeleteEditBillingAddress/', @(item.Id)); return false;">Delete</button>*@
                                        </div>
                                        <ul class="address-box">
                                            <li class="name">
                                                @item.FirstName @item.LastName
                                            </li>
                                            <li class="email">
                                                <label>Email:</label>
                                                <span>@item.Email</span>
                                            </li>
                                            @if (item.PhoneEnabled)
                                            {
                                                <li class="phone">
                                                    <label>PhoneNumber:</label>
                                                    <span>@item.PhoneNumber</span>
                                                </li>
                                            }
                                            @if (item.FaxEnabled)
                                            {
                                                <li class="fax">
                                                    <label>FaxNumber:</label>
                                                    <span>@item.FaxNumber</span>
                                                </li>
                                            }
                                            @if (item.CompanyEnabled && !string.IsNullOrEmpty(item.Company))
                                            {
                                                <li class="company">
                                                    @item.Company
                                                </li>
                                            }
                                            @if (item.StreetAddressEnabled)
                                            {
                                                <li class="address1">
                                                    @item.Address1
                                                </li>
                                            }
                                            @if (item.StreetAddress2Enabled && !string.IsNullOrEmpty(item.Address2))
                                            {
                                                <li class="address2">
                                                    @item.Address2
                                                </li>
                                            }
                                            @if (item.CityEnabled && !string.IsNullOrEmpty(item.City) ||
                                                item.CountyEnabled && !string.IsNullOrEmpty(item.County) ||
                                                item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                                item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                            {
                                                <li class="city-state-zip">
                                                    @if (item.CityEnabled && !string.IsNullOrEmpty(item.City))
                                                    {
                                                        @item.City
                                                        if (item.CountyEnabled && !string.IsNullOrEmpty(item.County) ||
                                                            item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                                            item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                        {
                                                            <text>,</text>
                                                        }
                                                    }
                                                    @if (item.CountyEnabled && !string.IsNullOrEmpty(item.County))
                                                    {
                                                        @item.County
                                                        if (item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                                            item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                        {
                                                            <text>,</text>
                                                        }
                                                    }
                                                    @if (item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName))
                                                    {
                                                        @item.StateProvinceName
                                                        if (item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                        {
                                                            <text>,</text>
                                                        }
                                                    }
                                                    @if (item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                    {
                                                        @item.ZipPostalCode
                                                    }
                                                </li>
                                            }
                                            @if (item.CountryEnabled && !string.IsNullOrEmpty(item.CountryName))
                                            {
                                                <li class="country">
                                                    @item.CountryName
                                                </li>
                                            }
                                            @if (!string.IsNullOrEmpty(item.FormattedCustomAddressAttributes))
                                            {
                                                <li class="custom-attributes-view">
                                                    @Html.Raw(item.FormattedCustomAddressAttributes)
                                                </li>
                                            }
                                        </ul>
                                        <div class="select-button">
                                            <button type="button" class="button-1 select-billing-address-button" onclick="selectBillingAddress@(item.Id)()">Bill to this address</button>
                                            
                                            <script asp-location="Footer">
                                                function selectBillingAddress@(item.Id)() {
                                                    if ($('#@Html.IdFor(model => model.ShipToSameAddress)')
                                                        .is(':checked')) {
                                                        setLocation(
                                                            '@Html.Raw(Url.RouteUrl("CheckoutSelectBillingAddressPos", new {addressId = item.Id, shipToSameAddress = "true"}))');
                                                    } else {
                                                        setLocation(
                                                            '@Url.RouteUrl("CheckoutSelectBillingAddressPos", new {addressId = item.Id})');
                                                    }
                                                }
                                            </script>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CheckoutBillingAddressMiddle, additionalData = Model })
                <div class="section new-billing-address" id="billingaddress-new-form">
                    <div class="title">
                        @*@if (Model.ExistingAddresses.Count > 0)
                        {
                        <strong class="title-text">Or enter new address</strong>
                        }
                        else
                        {*@
                        <strong>Enter billing address</strong>
                        @*}*@
                    </div>
                    @if (Model.EuVatEnabled)
                    {
                        <div class="inputs">
                            <label asp-for="VatNumber" asp-postfix=":"></label>
                            @if (Model.EuVatEnabledForGuests)
                            {
                                <input asp-for="VatNumber" />
                                <span asp-validation-for="VatNumber"></span>
                            }
                            else
                            {
                               @* <span class="vat-number-warning">
                                    @T("Checkout.VatNumber.Disabled", Url.RouteUrl("CustomerInfo"))
                                </span>*@
                            }
                        </div>
                    }
                    <div class="enter-address">
                        <div asp-validation-summary="ModelOnly" class="message-error"></div>
                        @{
                            var dataDictAddress = new ViewDataDictionary(ViewData);
                            dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                            @await Html.PartialAsync("~/Plugins/Pos/Views/CheckoutPos/_CreateOrUpdateAddress.cshtml", Model.BillingNewAddress, dataDictAddress)
                        }
                    </div>
                </div>
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CheckoutBillingAddressBottom, additionalData = Model })
            </div>
            <div class="buttons">
                <button id="billingaddress-save-button" type="button" class="button-1" style="display: none" onclick="CheckoutBilling.saveEditAddress('@(storeLocation)checkoutPos/SaveEditBillingAddress/'); return false;">Save</button>

                <button type="button" onclick="window.location.href='@(storeLocation)pos/neworder'" class="button-1">Back</button>

                <button id="billingaddress-cancel-button" type="button" class="button-1" style="display: none" onclick="setLocation('@Url.RouteUrl("CheckoutBillingAddress")')">Cancel</button>

                <button id="billingaddress-next-button" type="submit" name="nextstep" class="button-1 new-address-next-step-button">Next</button>
            </div>
        </form>
        <script asp-location="Footer">
            CheckoutBilling.init('#billing-form');            
            $('#edit-billing-address-button').show();
            $('#delete-billing-address-button').show();
        </script>
        <div class="section order-summary">
            <div class="title">
                <strong>Order summary</strong>
            </div>
            @await Component.InvokeAsync(typeof(OrderSummaryViewComponent))
        </div>
    </div>
</div>